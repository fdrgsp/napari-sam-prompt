name: Run Tests

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:

jobs:
  test:
    name: py${{ matrix.python-version }} ${{ matrix.backend }} ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        # backend: [pyside6, pyqt6]  # there is an error with pyside6 and napari. will add it later on
        backend: [pyqt6]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # these libraries enable testing on Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[test,${{ matrix.backend }}]

      - name: Test
        uses: GabrielBB/xvfb-action@v1
        with:
          run: python -m pytest -v --color=yes --cov=napari_sam_prompt --cov-report=xml

      - name: Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    # this will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    name: Deploy
    needs: [test]
    runs-on: ubuntu-latest

    if: contains(github.ref, 'tags')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          git tag
          pip install --upgrade pip
          pip install -U build twine check-manifest
          check-manifest
          python -m build

      - name: twine check
        run: |
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
